import com.leapmotion.leap.*;


/**
 * This class listener will listen to the leap motion controller.
 * It will be control an ceran panel by analyse the position of the hand
 * and the gesture made by the hand and finger on the leap motion controller.
 * 
 * @author Dennis HÃ¤gler - dennis.haegler@gmail.com
 */
public class CeranControlPanel extends Listener {

	@Override
	public void onInit(Controller controller) {
		System.out.println("Initialized");
	}

	@Override
	public void onConnect(Controller controller) {
		System.out.println("Connected");
		controller.enableGesture(Gesture.Type.TYPE_SWIPE);
		controller.enableGesture(Gesture.Type.TYPE_CIRCLE);
		controller.enableGesture(Gesture.Type.TYPE_SCREEN_TAP);
		controller.enableGesture(Gesture.Type.TYPE_KEY_TAP);
	}

	@Override
	public void onDisconnect(Controller controller) {
		System.out.println("Disconnected");
	}

	@Override
	public void onExit(Controller controller) {
		System.out.println("Exited");
	}

	@Override
	public void onFrame(Controller controller) {
		Frame prevFrame = controller.frame(1);
		Frame frame = controller.frame();
		int area = 0;
		if (!frame.hands().isEmpty()) {
			Hand hand = frame.hands().get(0);
			area = getNumberPointedField(hand);
			System.out.println("Position used: " + area);
		}
		GestureList gestures = frame.gestures();
		int countOfGestures = gestures.count();
		for (int i = 0; i < countOfGestures; i++) {
			Gesture gesture = gestures.get(i);
			switch (gesture.type()) {
				case TYPE_CIRCLE:
					circleGesture(gesture, frame, prevFrame);
					break;
				case TYPE_SWIPE:
					swipeGesture(gesture);
					break;
				case TYPE_SCREEN_TAP:
					screenTapGesture(gesture);
					break;
				case TYPE_KEY_TAP:
					keyTapGesture(gesture);
					break;
				default:
					System.out.println("Unknown gesture type.");
					break;
			}
		}
	}

	/**
	 * Returns an integer of the pointed field.
	 * The number will be generated by the position of the given hand.
	 * Depending on the position in coordinate system of the given coordinate system
	 * of the leap motion controller, the function will return an integer.
	 *
	 * The value will be from one to four. One will be representing the top left position of the field.
	 * Four will be representing the bottom right position of the field.
	 *
	 * @param hand A Hand tracked by the leap motion contains tracked data like the position in the
	 *             coordinate system given from the leap motion controller.
	 * @return an integer of the pointed field.
	 */
	private int getNumberPointedField(Hand hand) {
		Vector vector = hand.palmPosition();
		float xPos = vector.getX();
		float zPos = vector.getZ();
		int position;
		if (zPos < 0) {
			if (xPos < 0) {
				position = 1;
			} else {
				position = 2;
			}
		} else {
			if (xPos < 0) {
				position = 3;
			} else {
				position = 4;
			}
		}
		return position;
	}

	/**
	 *
	 * @param gesture
	 */
	private void circleGesture(Gesture gesture, Frame frame, Frame prevFrame) {
		CircleGesture circle = new CircleGesture(gesture);
		String clockwiseness;
		if (circle.pointable().direction().angleTo(circle.normal()) <= Math.PI / 4) {
			// Clockwise if angle is less than 90 degrees
			clockwiseness = "clockwise";
		} else {
			clockwiseness = "counterclockwise";
		}
		double sweptAngle = 0;
		if (circle.state() != Gesture.State.STATE_START) {
			CircleGesture previousUpdate = new CircleGesture(prevFrame.gesture(circle.id()));
			sweptAngle = (circle.progress() - previousUpdate.progress()) * 2 * Math.PI;
		}
		System.out.println("Circle id: " + circle.id()
				+ ", " + circle.state()
				+ ", progress: " + circle.progress()
				+ ", radius: " + circle.radius()
				+ ", angle: " + Math.toDegrees(sweptAngle)
				+ ", " + clockwiseness);
	}

	/**
	 *
	 * @param gesture
	 */
	private void swipeGesture(Gesture gesture) {
		SwipeGesture swipe = new SwipeGesture(gesture);
		System.out.println("Swipe id: " + swipe.id()
				+ ", " + swipe.state()
				+ ", position: " + swipe.position()
				+ ", direction: " + swipe.direction()
				+ ", speed: " + swipe.speed());
	}

	/**
	 *
	 * @param gesture
	 */
	private void screenTapGesture(Gesture gesture) {
		ScreenTapGesture screenTap = new ScreenTapGesture(gesture);
		System.out.println("Screen Tap id: " + screenTap.id()
				+ ", " + screenTap.state()
				+ ", position: " + screenTap.position()
				+ ", direction: " + screenTap.direction());
	}

	/**
	 *
	 * @param gesture
	 */
	private void keyTapGesture(Gesture gesture) {
		KeyTapGesture keyTap = new KeyTapGesture(gesture);
		System.out.println("Key Tap id: " + keyTap.id()
				+ ", " + keyTap.state()
				+ ", position: " + keyTap.position()
				+ ", direction: " + keyTap.direction());
	}
}
